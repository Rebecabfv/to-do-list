"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

exports.notFoundHandler = notFoundHandler;
exports.methodNotAllowedHandler = methodNotAllowedHandler;
Object.defineProperty(exports, "__esModule", {
    value: true
});

var xhr = _interopRequire(require("mock-xhr"));

var Publisher = require("more-router").Publisher;

var polyfill = _interopRequire(require("babel/polyfill"));

var FakeResponse = exports.FakeResponse = (function () {
    function FakeResponse(body) {
        var status = arguments[1] === undefined ? 200 : arguments[1];
        var headers = arguments[2] === undefined ? null : arguments[2];

        _classCallCheck(this, FakeResponse);

        if (headers === null) {
            headers = { "Content-Type": "application/json" };
        }
        this.status = status;
        this.headers = headers;
        this.body = body;
    }

    _createClass(FakeResponse, {
        execute: {
            value: function execute(request) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.keys(this.headers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var key = _step.value;

                        request.setResponseHeader(key, this.headers[key]);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"]) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                request.receive(this.status, this.body);
            }
        },
        fetchResponse: {
            value: function fetchResponse() {
                //        return new Promise((resolve, reject) => {
                return new Response(this.body, { status: this.status,
                    headers: this.headers });
                //        });
            }
        }
    });

    return FakeResponse;
})();

;

var NotFoundResponse = exports.NotFoundResponse = (function (_FakeResponse) {
    function NotFoundResponse() {
        _classCallCheck(this, NotFoundResponse);

        _get(Object.getPrototypeOf(NotFoundResponse.prototype), "constructor", this).call(this, "Not Found", 404, { "Content-Type": "text/plain" });
    }

    _inherits(NotFoundResponse, _FakeResponse);

    return NotFoundResponse;
})(FakeResponse);

;

function notFoundHandler(variables, request) {
    return new NotFoundResponse();
}

function methodNotAllowedHandler(variables, request) {
    return new FakeResponse("Method not allowed", 405, { "Content-Type": "text/plain" });
}

var FakeServer = exports.FakeServer = (function (_xhr$server) {
    function FakeServer(keySpec) {
        _classCallCheck(this, FakeServer);

        _get(Object.getPrototypeOf(FakeServer.prototype), "constructor", this).call(this);
        this.publisher = new Publisher(keySpec);
    }

    _inherits(FakeServer, _xhr$server);

    _createClass(FakeServer, {
        register: {
            value: function register(path, handler) {
                var keyObj = arguments[2] === undefined ? null : arguments[2];

                if (keyObj === null) {
                    keyObj = {};
                }
                this.publisher.register(path, keyObj, handler);
            }
        },
        makeResponse: {
            value: function makeResponse(request) {
                var result = this.publisher.resolve(request.urlParts.path, request);
                if (result === null) {
                    return notFoundHandler({}, request);
                }
                if (result instanceof FakeResponse) {
                    return result;
                }
                return new FakeResponse(result);
            }
        },
        handle: {
            value: function handle(request) {
                var response = this.makeResponse(request);
                response.execute(request);
            }
        }
    });

    return FakeServer;
})(xhr.server);

;

var FakeFetch = exports.FakeFetch = (function () {
    function FakeFetch(keySpec) {
        _classCallCheck(this, FakeFetch);

        this.publisher = new Publisher(keySpec);
    }

    _createClass(FakeFetch, {
        register: {
            value: function register(path, handler) {
                var keyObj = arguments[2] === undefined ? null : arguments[2];

                if (keyObj === null) {
                    keyObj = {};
                }
                this.publisher.register(path, keyObj, handler);
            }
        },
        getFetch: {
            value: function getFetch() {
                var _this = this;

                return function (uri, init) {
                    if (init === undefined) {
                        init = {};
                    }
                    var u = new URL(uri, window.location);
                    var request = new Request(uri, init);

                    var p = _this.publisher.resolve(u.pathname, request);
                    if (p === null) {
                        return Promise.resolve(notFoundHandler({}, request));
                    }
                    return p.then(function (r) {
                        var response = null;
                        if (r === null) {
                            response = notFoundHandler({}, request);
                        } else if (r instanceof FakeResponse) {
                            response = r;
                        } else {
                            response = new FakeResponse(r);
                        }
                        return response.fetchResponse();
                    });
                };
            }
        }
    });

    return FakeFetch;
})();

;